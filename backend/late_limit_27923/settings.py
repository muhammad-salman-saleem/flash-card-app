"""
Django settings for late_limit_27923 project.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import environ
import logging

env = environ.Env()
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

ALLOWED_HOSTS = env.list("HOST", default=["*"])

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SECURE_SSL_REDIRECT = env.bool("SECURE_REDIRECT", default=False)

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
]
LOCAL_APPS = [
    "home",
    "modules",
    "users.apps.UsersConfig",
    "category",
    "decks",
    "questions",
    "answers",
    "user_score",
    "questions_attempted",
    "resources",
]
THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework.authtoken",
    "rest_auth",
    "rest_auth.registration",
    "bootstrap4",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.facebook",
    "allauth.socialaccount.providers.apple",
    "django_rest_passwordreset",
    "django_extensions",
    "drf_yasg",
    "storages",
    # start fcm_django push notifications
    "fcm_django",
    # end fcm_django push notifications
    "django_filters",
    "djstripe",
]

INSTALLED_APPS += LOCAL_APPS + THIRD_PARTY_APPS
SITE_ID = 1
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    #"django.middleware.csrf.CsrfViewMiddleware",
    "late_limit_27923.middleware.DisableCSRF",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "late_limit_27923.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "web_build"),
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "late_limit_27923.wsgi.application"

# Start: Social Login
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
        "APP": {
            "client_id": env.str("GOOGLE_CLIENT_ID", ""),
            "secret": env.str("GOOGLE_CLIENT_SECRET", ""),
        }
    },
    "apple": {
        "APP": {
            # Your service identifier.
            "client_id": env.str("SOCIAL_AUTH_APPLE_CLIENT_ID", ""),
            # The Key ID (visible in the "View Key Details" page).
            "secret": env.str("SOCIAL_AUTH_APPLE_SECRET", ""),
            # Member ID/App ID Prefix -- you can find it below your name
            # at the top right corner of the page, or itâ€™s your App ID
            # Prefix in your App ID.
            "key": env.str("SOCIAL_AUTH_APPLE_KEY", ""),
            # The certificate you downloaded when generating the key.
            "certificate_key":  """-----BEGIN PRIVATE KEY-----
MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQg4e/ksq+ZftJuY1D/
p3lUzyuiRVSKYjiuD/xsGcDWhLOgCgYIKoZIzj0DAQehRANCAAQ0yUB3DMLPeS0R
EuZpVW1vVUjeSsTIsqCLHy7mNhPw03LUhONJd96KJrxkbMXQVI4SxxZfWwi9eV1i
vT0MwYtM
-----END PRIVATE KEY-----""",
        }
    },
    "facebook": {
        "METHOD": "oauth2",
        "SDK_URL": "//connect.facebook.net/{locale}/sdk.js",
        "SCOPE": ["email", "public_profile"],
        "AUTH_PARAMS": {"auth_type": "reauthenticate"},
        "INIT_PARAMS": {"cookie": True},
        "FIELDS": [
            "id",
            "first_name",
            "last_name",
            "name",
            "email",
        ],
        "EXCHANGE_TOKEN": True,
        "LOCALE_FUNC": lambda request: "ru_RU",
        "VERIFIED_EMAIL": False,
        "VERSION": "v7.0",
        "APP": {
            "client_id": env.str("FACEBOOK_APP_ID", ""),
            "secret": env.str("FACEBOOK_SECRET", ""),
        }
    },
}
# End: Social Login

# Start: Social log out
REST_SESSION_LOGIN = True
REST_USE_JWT = False
# FACEBOOK SETTINGS

# True by default. Users not to be interrupted by logging in message
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = False
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = True
# ACCOUNT_LOGOUT_REDIRECT_URL = "/login"
# User always logged in
ACCOUNT_SESSION_REMEMBER = True

# End: Social log out

# Start: Stripe
STRIPE_PUBLISHABLE_KEY = env.str("STRIPE_PUBLISHABLE_KEY", "")
STRIPE_SECRET_KEY = env.str("STRIPE_SECRET_KEY", "")
# End: Stripe

# Start APPLE PAY
VERIFY_RECEIPT_SANDBOX = env.str("VERIFY_RECEIPT_SANDBOX", "")
VERIFY_RECEIPT_PROD = env.str("VERIFY_RECEIPT_PROD", "")
APPLE_SHARED_SECRET_KEY = env.str("APPLE_SHARED_SECRET_KEY", "")
# End APPLE PAY

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}

if env.str("DATABASE_URL", default=None):
    DATABASES = {"default": env.db()}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"

MIDDLEWARE += ["whitenoise.middleware.WhiteNoiseMiddleware"]

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
)

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
    os.path.join(BASE_DIR, "web_build/static"),
]
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# allauth / users
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = "optional"
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_UNIQUE_EMAIL = True
LOGIN_REDIRECT_URL = "users:redirect"

ACCOUNT_ADAPTER = "users.adapters.AccountAdapter"
SOCIALACCOUNT_ADAPTER = "users.adapters.SocialAccountAdapter"
ACCOUNT_ALLOW_REGISTRATION = env.bool("ACCOUNT_ALLOW_REGISTRATION", True)
SOCIALACCOUNT_ALLOW_REGISTRATION = env.bool("SOCIALACCOUNT_ALLOW_REGISTRATION", True)
SOCIALACCOUNT_EMAIL_REQUIRED = True

REST_AUTH_SERIALIZERS = {
    # Replace password reset serializer to fix 500 error
    "PASSWORD_RESET_SERIALIZER": "home.api.v1.serializers.PasswordSerializer",
    "TOKEN_SERIALIZER": "home.api.v1.serializers.TokenSerializer",
}
REST_AUTH_REGISTER_SERIALIZERS = {
    # Use custom serializer that has no username and matches web signup
    "REGISTER_SERIALIZER": "home.api.v1.serializers.SignupSerializer",
}

# Custom user model
AUTH_USER_MODEL = "users.User"

EMAIL_HOST = env.str("EMAIL_HOST", "smtp.sendgrid.net")
EMAIL_HOST_USER = env.str("SENDGRID_USERNAME", "")
EMAIL_HOST_PASSWORD = env.str("SENDGRID_PASSWORD", "")
EMAIL_PORT = 587
EMAIL_USE_TLS = True

# AWS S3 config
AWS_ACCESS_KEY_ID = env.str("AWS_ACCESS_KEY_ID", "")
AWS_SECRET_ACCESS_KEY = env.str("AWS_SECRET_ACCESS_KEY", "")
AWS_STORAGE_BUCKET_NAME = env.str("AWS_STORAGE_BUCKET_NAME", "")
AWS_STORAGE_REGION = env.str("AWS_STORAGE_REGION", "")
AWS_DEFAULT_ACL = "private"
AWS_S3_ADDRESSING_STYLE = "virtual"
AWS_S3_ENDPOINT_URL = f"https://s3.{AWS_STORAGE_REGION}.amazonaws.com"
AWS_S3_REGION_NAME = env.str("AWS_STORAGE_REGION", "")

USE_S3 = (
        AWS_ACCESS_KEY_ID
        and AWS_SECRET_ACCESS_KEY
        and AWS_STORAGE_BUCKET_NAME
        and AWS_STORAGE_REGION
)

if USE_S3:
    AWS_S3_CUSTOM_DOMAIN = env.str("AWS_S3_CUSTOM_DOMAIN", "")
    AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
    AWS_DEFAULT_ACL = env.str("AWS_DEFAULT_ACL", "public-read")
    AWS_MEDIA_LOCATION = env.str("AWS_MEDIA_LOCATION", "media")
    AWS_AUTO_CREATE_BUCKET = env.bool("AWS_AUTO_CREATE_BUCKET", True)
    DEFAULT_FILE_STORAGE = env.str(
        "DEFAULT_FILE_STORAGE", "home.storage_backends.MediaStorage"
    )
    MEDIA_URL = "/mediafiles/"
    MEDIA_ROOT = os.path.join(BASE_DIR, "mediafiles")
else:
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    MEDIA_URL = '/media/'

# start fcm_django push notifications
FCM_DJANGO_SETTINGS = {"FCM_SERVER_KEY": env.str("FCM_SERVER_KEY", "")}
# end fcm_django push notifications


# Swagger settings for api docs
SWAGGER_SETTINGS = {
    "DEFAULT_INFO": f"{ROOT_URLCONF}.api_info",
}

if DEBUG or not (EMAIL_HOST_USER and EMAIL_HOST_PASSWORD):
    # output email to console instead of sending
    if not DEBUG:
        logging.warning(
            "You should setup `SENDGRID_USERNAME` and `SENDGRID_PASSWORD` env vars to send emails."
        )
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# custom settings

REST_FRAMEWORK = {
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    "DATETIME_FORMAT": "%Y-%m-%d %H:%M:%S",
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.BasicAuthentication",
        # "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

DEFAULT_FROM_EMAIL = "support@straightanursingstudent.com"


if DEBUG:
    STRIPE_PUBLIC_PUBLIC_KEY = env.str("STRIPE_PUBLISHABLE_KEY", "")
    STRIPE_TEST_SECRET_KEY = env.str("STRIPE_SECRET_KEY", "")
    STRIPE_LIVE_MODE = False
    DJSTRIPE_FOREIGN_KEY_TO_FIELD = "id"
    DJSTRIPE_WEBHOOK_VALIDATION = 'retrieve_event'
else:
    STRIPE_PUBLIC_PUBLIC_KEY = env.str("STRIPE_PUBLIC_PUBLIC_KEY", "")
    STRIPE_TEST_SECRET_KEY = env.str("STRIPE_SECRET_KEY", "")
    DJSTRIPE_WEBHOOK_SECRET = "whsec_xxx"
    DJSTRIPE_FOREIGN_KEY_TO_FIELD = "id"
    DJSTRIPE_WEBHOOK_VALIDATION = 'retrieve_event'

STRIPE_PRODUCT_MONTHLY_PRICE = env.str("STRIPE_PRODUCT_MONTHLY_PRICE", "price_1LP9t2Jl7wgmc2AnwDmmFnov")
STRIPE_PRODUCT_YEARLY_PRICE = env.str("STRIPE_PRODUCT_YEARLY_PRICE", "price_1LP9t2Jl7wgmc2AnFOxxMhXb")

LOGIN_REDIRECT_URL = '/rest-auth/login/'
LOGIN_URL = '/email-confirmed/'

DJANGO_REST_MULTITOKENAUTH_REQUIRE_USABLE_PASSWORD = False
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000 
